{"ast":null,"code":"import _regeneratorRuntime from\"/home/ilia/Documents/Saba/newProjectApi/my-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/ilia/Documents/Saba/newProjectApi/my-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/ilia/Documents/Saba/newProjectApi/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/home/ilia/Documents/Saba/newProjectApi/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useState,useEffect,useReducer}from\"react\";import PostList from\"./PostList\";import NewPost from\"./NewPost\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function reducer(state,action){return _objectSpread(_objectSpread({},state),{},{posts:action.payload});}function DataFetching(){//useState\n//const [posts, setPosts] = useState([]);\n//useReduce\nvar _useReducer=useReducer(reducer,{posts:[]}),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];//const [newPosts, setNewPosts] = useState([]);\n//const [postId, setPostId] = useState([]);\n//const [title, setTitle] = useState(\"\");\n//const [body, setBody] = useState(\"\");\n/*useEffect(() => {\n        /*async function getResponse() {\n            let response = await fetch('https://jsonplaceholder.typicode.com/posts')\n            let content = await response.json()\n            content = content.splice(0, 4)\n            setPosts(response.data)\n            let list = document.querySelector('.posts')\n        \n            let key;\n        \n            for (key in content) {\n              \n                list.innerHTML += `\n                <li>\n                  <h4>${content[key].title}</h4>\n                  <p>${content[key].body}</p>\n                </li>\n              `\n            }\n        };\n        \n          getResponse();\n    }, [])*/useEffect(function(){var abortCont=new AbortController();setTimeout(function(){function getResponse(){return _getResponse.apply(this,arguments);}function _getResponse(){_getResponse=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,content;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch('http://localhost:8000/Posts',{signal:abortCont.signal});case 2:response=_context.sent;_context.next=5;return response.json();case 5:content=_context.sent;//content = content.splice(96, content.length)\n//setPosts(content)\ndispatch({payload:content});console.log(content,\"its posts\");case 8:case\"end\":return _context.stop();}}},_callee);}));return _getResponse.apply(this,arguments);};getResponse();},100);return function(){return abortCont.abort();};},['http://localhost:8000/Posts']);//post method\n/*useEffect(() => {\n        // POST request using fetch inside useEffect React hook\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                 title: title,\n                 body : text\n                })\n        };\n        fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n            .then(response => response.json())\n            .then(data => setPostId(data.id));\n    \n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n    }, []);*/ //handle\n/*const handleInputTitleChange = (e) => {\n        setTitle(e.target.value)\n    }\n\n    const handleInputTextChange = (e) => {\n        setBody(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        //const Blog = {title, text}\n        //console.log(Blog)\n      \n        // POST request using fetch inside useEffect React hook\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                title: title,\n                body : body\n                })\n        };\n        fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n            .then(response => response.json())\n            //.then(data => setPostId(data.id))\n            .then(post => {\n                newPosts.push(post)\n            })\n            .then(() => {\n                console.log(newPosts, \"post added\")\n                \n            })\n      \n    }*/return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(PostList,{posts:state.posts})});}export default DataFetching;","map":{"version":3,"sources":["/home/ilia/Documents/Saba/newProjectApi/my-app/src/DataFetching.js"],"names":["useState","useEffect","useReducer","PostList","NewPost","reducer","state","action","posts","payload","DataFetching","dispatch","abortCont","AbortController","setTimeout","getResponse","fetch","signal","response","json","content","console","log","abort"],"mappings":"ggBAAA,OAASA,QAAT,CAAmBC,SAAnB,CAA8BC,UAA9B,KAAgD,OAAhD,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,C,gGAEA,QAASC,CAAAA,OAAT,CAAkBC,KAAlB,CAAyBC,MAAzB,CAAgC,CAC5B,sCACOD,KADP,MAEIE,KAAK,CAAED,MAAM,CAACE,OAFlB,GAIH,CAID,QAASC,CAAAA,YAAT,EAAwB,CACpB;AACA;AACA;AACA,gBAA0BR,UAAU,CAACG,OAAD,CAAU,CAAEG,KAAK,CAAE,EAAT,CAAV,CAApC,4CAAOF,KAAP,iBAAcK,QAAd,iBAEA;AACA;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAEIV,SAAS,CAAC,UAAM,CACZ,GAAMW,CAAAA,SAAS,CAAG,GAAIC,CAAAA,eAAJ,EAAlB,CAEAC,UAAU,CAAC,UAAM,SACEC,CAAAA,WADF,2IACb,8KACyBC,CAAAA,KAAK,CAAC,6BAAD,CAAgC,CAAEC,MAAM,CAAEL,SAAS,CAACK,MAApB,CAAhC,CAD9B,QACQC,QADR,qCAEwBA,CAAAA,QAAQ,CAACC,IAAT,EAFxB,QAEQC,OAFR,eAGI;AACA;AACAT,QAAQ,CAAC,CAAEF,OAAO,CAAEW,OAAX,CAAD,CAAR,CACAC,OAAO,CAACC,GAAR,CAAYF,OAAZ,CAAqB,WAArB,EANJ,sDADa,8CAQZ,CAEDL,WAAW,GACd,CAXS,CAWP,GAXO,CAAV,CAaA,MAAO,kBAAMH,CAAAA,SAAS,CAACW,KAAV,EAAN,EAAP,CACH,CAjBQ,CAiBN,CAAC,6BAAD,CAjBM,CAAT,CAmBA;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAtEwB,CAwEpB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAEI,mBACI,sCACI,KAAC,QAAD,EAAU,KAAK,CAAGjB,KAAK,CAACE,KAAxB,EADJ,EADJ,CAKH,CAED,cAAeE,CAAAA,YAAf","sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\nimport PostList from \"./PostList\";\nimport NewPost from \"./NewPost\";\n\nfunction reducer (state, action){\n    return { \n        ...state,\n        posts: action.payload\n    }\n}\n\n\n\nfunction DataFetching() {\n    //useState\n    //const [posts, setPosts] = useState([]);\n    //useReduce\n    const [state, dispatch] = useReducer(reducer, { posts: []})\n    \n    //const [newPosts, setNewPosts] = useState([]);\n    //const [postId, setPostId] = useState([]);\n    //const [title, setTitle] = useState(\"\");\n    //const [body, setBody] = useState(\"\");\n    /*useEffect(() => {\n        /*async function getResponse() {\n            let response = await fetch('https://jsonplaceholder.typicode.com/posts')\n            let content = await response.json()\n            content = content.splice(0, 4)\n            setPosts(response.data)\n            let list = document.querySelector('.posts')\n        \n            let key;\n        \n            for (key in content) {\n              \n                list.innerHTML += `\n                <li>\n                  <h4>${content[key].title}</h4>\n                  <p>${content[key].body}</p>\n                </li>\n              `\n            }\n        };\n        \n          getResponse();\n    }, [])*/\n\n    useEffect(() => {\n        const abortCont = new AbortController();\n\n        setTimeout(() => {\n            async function getResponse() {\n                let response = await fetch('http://localhost:8000/Posts', { signal: abortCont.signal })\n                let content = await response.json();\n                //content = content.splice(96, content.length)\n                //setPosts(content)\n                dispatch({ payload: content})\n                console.log(content, \"its posts\")\n            };\n            \n            getResponse();\n        }, 100);\n            \n        return () => abortCont.abort();\n    }, ['http://localhost:8000/Posts'])\n\n    //post method\n\n    /*useEffect(() => {\n        // POST request using fetch inside useEffect React hook\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                 title: title,\n                 body : text\n                })\n        };\n        fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n            .then(response => response.json())\n            .then(data => setPostId(data.id));\n    \n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n    }, []);*/\n\n    //handle\n    /*const handleInputTitleChange = (e) => {\n        setTitle(e.target.value)\n    }\n\n    const handleInputTextChange = (e) => {\n        setBody(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        //const Blog = {title, text}\n        //console.log(Blog)\n      \n        // POST request using fetch inside useEffect React hook\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                title: title,\n                body : body\n                })\n        };\n        fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n            .then(response => response.json())\n            //.then(data => setPostId(data.id))\n            .then(post => {\n                newPosts.push(post)\n            })\n            .then(() => {\n                console.log(newPosts, \"post added\")\n                \n            })\n      \n    }*/\n\n    return (\n        <>\n            <PostList posts ={state.posts}/>\n        </>\n    )\n}\n\nexport default DataFetching;"]},"metadata":{},"sourceType":"module"}