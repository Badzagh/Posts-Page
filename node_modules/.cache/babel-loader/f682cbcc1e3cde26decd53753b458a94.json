{"ast":null,"code":"var _jsxFileName = \"/home/ilia/Documents/Saba/newProjectApi/my-app/src/DataFetching.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useReducer } from \"react\";\nimport PostList from \"./PostList\";\nimport NewPost from \"./NewPost\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  return { ...state,\n    posts: action.payload\n  };\n}\n\nfunction DataFetching() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    posts: []\n  });\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      async function getResponse() {\n        let response = await fetch('http://localhost:8000/Posts', {\n          signal: abortCont.signal\n        });\n        let content = await response.json();\n        dispatch({\n          payload: content\n        });\n        console.log(content, \"its posts\");\n      }\n\n      ;\n      getResponse();\n    }, 100);\n    return () => abortCont.abort();\n  }, ['http://localhost:8000/Posts']); //post method\n\n  /*useEffect(() => {\n      // POST request using fetch inside useEffect React hook\n      const requestOptions = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n               title: title,\n               body : text\n              })\n      };\n      fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n          .then(response => response.json())\n          .then(data => setPostId(data.id));\n  \n  // empty dependency array means this effect will only run once (like componentDidMount in classes)\n  }, []);*/\n  //handle\n\n  /*const handleInputTitleChange = (e) => {\n      setTitle(e.target.value)\n  }\n   const handleInputTextChange = (e) => {\n      setBody(e.target.value)\n  }\n   const handleSubmit = (e) => {\n      e.preventDefault();\n       //const Blog = {title, text}\n      //console.log(Blog)\n    \n      // POST request using fetch inside useEffect React hook\n      const requestOptions = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n              title: title,\n              body : body\n              })\n      };\n      fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n          .then(response => response.json())\n          //.then(data => setPostId(data.id))\n          .then(post => {\n              newPosts.push(post)\n          })\n          .then(() => {\n              console.log(newPosts, \"post added\")\n              \n          })\n    \n  }*/\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(PostList, {\n      posts: state.posts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(DataFetching, \"8EeBTHGkUHKzbJ8SPNGX5hiidQk=\");\n\n_c = DataFetching;\nexport default DataFetching;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataFetching\");","map":{"version":3,"sources":["/home/ilia/Documents/Saba/newProjectApi/my-app/src/DataFetching.js"],"names":["useState","useEffect","useReducer","PostList","NewPost","reducer","state","action","posts","payload","DataFetching","dispatch","abortCont","AbortController","setTimeout","getResponse","response","fetch","signal","content","json","console","log","abort"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;;AAEA,SAASC,OAAT,CAAkBC,KAAlB,EAAyBC,MAAzB,EAAgC;AAC5B,SAAO,EACH,GAAGD,KADA;AAEHE,IAAAA,KAAK,EAAED,MAAM,CAACE;AAFX,GAAP;AAIH;;AAID,SAASC,YAAT,GAAwB;AAAA;;AACpB,QAAM,CAACJ,KAAD,EAAQK,QAAR,IAAoBT,UAAU,CAACG,OAAD,EAAU;AAAEG,IAAAA,KAAK,EAAE;AAAT,GAAV,CAApC;AAGAP,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMW,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AAEAC,IAAAA,UAAU,CAAC,MAAM;AACb,qBAAeC,WAAf,GAA6B;AACzB,YAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAAD,EAAgC;AAAEC,UAAAA,MAAM,EAAEN,SAAS,CAACM;AAApB,SAAhC,CAA1B;AACA,YAAIC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAApB;AACAT,QAAAA,QAAQ,CAAC;AAAEF,UAAAA,OAAO,EAAEU;AAAX,SAAD,CAAR;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAqB,WAArB;AACH;;AAAA;AAEDJ,MAAAA,WAAW;AACd,KATS,EASP,GATO,CAAV;AAWA,WAAO,MAAMH,SAAS,CAACW,KAAV,EAAb;AACH,GAfQ,EAeN,CAAC,6BAAD,CAfM,CAAT,CAJoB,CAqBpB;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKI,sBACI;AAAA,2BACI,QAAC,QAAD;AAAU,MAAA,KAAK,EAAGjB,KAAK,CAACE;AAAxB;AAAA;AAAA;AAAA;AAAA;AADJ,mBADJ;AAKH;;GAlFQE,Y;;KAAAA,Y;AAoFT,eAAeA,YAAf","sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\nimport PostList from \"./PostList\";\nimport NewPost from \"./NewPost\";\n\nfunction reducer (state, action){\n    return { \n        ...state,\n        posts: action.payload\n    }\n}\n\n\n\nfunction DataFetching() {\n    const [state, dispatch] = useReducer(reducer, { posts: []})\n    \n\n    useEffect(() => {\n        const abortCont = new AbortController();\n\n        setTimeout(() => {\n            async function getResponse() {\n                let response = await fetch('http://localhost:8000/Posts', { signal: abortCont.signal })\n                let content = await response.json();\n                dispatch({ payload: content})\n                console.log(content, \"its posts\")\n            };\n            \n            getResponse();\n        }, 100);\n            \n        return () => abortCont.abort();\n    }, ['http://localhost:8000/Posts'])\n\n    //post method\n\n    /*useEffect(() => {\n        // POST request using fetch inside useEffect React hook\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                 title: title,\n                 body : text\n                })\n        };\n        fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n            .then(response => response.json())\n            .then(data => setPostId(data.id));\n    \n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n    }, []);*/\n\n    //handle\n    /*const handleInputTitleChange = (e) => {\n        setTitle(e.target.value)\n    }\n\n    const handleInputTextChange = (e) => {\n        setBody(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        //const Blog = {title, text}\n        //console.log(Blog)\n      \n        // POST request using fetch inside useEffect React hook\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                title: title,\n                body : body\n                })\n        };\n        fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n            .then(response => response.json())\n            //.then(data => setPostId(data.id))\n            .then(post => {\n                newPosts.push(post)\n            })\n            .then(() => {\n                console.log(newPosts, \"post added\")\n                \n            })\n      \n    }*/\n\n    return (\n        <>\n            <PostList posts ={state.posts}/>\n        </>\n    )\n}\n\nexport default DataFetching;"]},"metadata":{},"sourceType":"module"}