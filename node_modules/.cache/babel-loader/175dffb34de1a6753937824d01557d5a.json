{"ast":null,"code":"var _jsxFileName = \"/home/ilia/Documents/Saba/newProjectApi/my-app/src/NewPost.js\";\nimport { useState, useEffect, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  return { ...state,\n    posts: action.payload\n  };\n}\n\nfunction NewPost() {\n  //const newPosts = props.newPosts\n  //<NewPost handleSubmit={handleSubmit} handleInputTitleChange={handleInputTitleChange} handleInputTextChange={handleInputTextChange} title={title} body={body}/>\n  //useState\n\n  /*const [newPosts, setNewPosts] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");*/\n  const handleInputTitleChange = e => {\n    setTitle(e.target.value);\n  };\n\n  const handleInputTextChange = e => {\n    setBody(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const Blog = {\n      title,\n      body\n    };\n    console.log(Blog); // POST request using fetch inside useEffect React hook\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: title,\n        body: body\n      })\n    };\n    fetch('http://localhost:8000/Posts', requestOptions).then(response => {\n      response.json();\n      console.log(response, \"post added\");\n    }) //.then(data => setPostId(data.id))\n    //.then(post => newPosts.push(post))\n    .then(() => {\n      console.log(newPosts, \"post added\");\n    });\n  };\n  /*{newPosts.map(newPost => (\n    <div key={newPost.id}>\n        <h4>{newPost.title}</h4>\n        <p>{newPost.body}</p>\n    </div>\n  ))}*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Blog title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => handleInputTitleChange(e),\n        id: \"title-value\",\n        type: \"text\",\n        value: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Blog text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        onChange: e => handleInputTextChange(e),\n        type: \"text\",\n        id: \"text-value\",\n        value: body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Blog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_c = NewPost;\nexport default NewPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"sources":["/home/ilia/Documents/Saba/newProjectApi/my-app/src/NewPost.js"],"names":["useState","useEffect","useReducer","reducer","state","action","posts","payload","NewPost","handleInputTitleChange","e","setTitle","target","value","handleInputTextChange","setBody","handleSubmit","preventDefault","Blog","title","body","console","log","requestOptions","method","headers","JSON","stringify","fetch","then","response","json","newPosts"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;;;AAGA,SAASC,OAAT,CAAkBC,KAAlB,EAAyBC,MAAzB,EAAgC;AAC9B,SAAO,EACH,GAAGD,KADA;AAEHE,IAAAA,KAAK,EAAED,MAAM,CAACE;AAFX,GAAP;AAID;;AAGD,SAASC,OAAT,GAAmB;AACjB;AACA;AAGA;;AACA;AACF;AACA;AAEE,QAAMC,sBAAsB,GAAIC,CAAD,IAAO;AACpCC,IAAAA,QAAQ,CAACD,CAAC,CAACE,MAAF,CAASC,KAAV,CAAR;AACH,GAFC;;AAIA,QAAMC,qBAAqB,GAAIJ,CAAD,IAAO;AACjCK,IAAAA,OAAO,CAACL,CAAC,CAACE,MAAF,CAASC,KAAV,CAAP;AACH,GAFD;;AAIA,QAAMG,YAAY,GAAIN,CAAD,IAAO;AACxBA,IAAAA,CAAC,CAACO,cAAF;AAEA,UAAMC,IAAI,GAAG;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EAJwB,CAMxB;;AACA,UAAMK,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFU;AAGnBL,MAAAA,IAAI,EAAEM,IAAI,CAACC,SAAL,CAAe;AACjBR,QAAAA,KAAK,EAAEA,KADU;AAEjBC,QAAAA,IAAI,EAAGA;AAFU,OAAf;AAHa,KAAvB;AAQAQ,IAAAA,KAAK,CAAC,6BAAD,EAAgCL,cAAhC,CAAL,CACKM,IADL,CACUC,QAAQ,IAAI;AAChBA,MAAAA,QAAQ,CAACC,IAAT;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYQ,QAAZ,EAAsB,YAAtB;AACD,KAJL,EAKI;AACA;AANJ,KAOKD,IAPL,CAOU,MAAM;AACRR,MAAAA,OAAO,CAACC,GAAR,CAAYU,QAAZ,EAAsB,YAAtB;AACH,KATL;AAUH,GAzBD;AA2BA;AACF;AACA;AACA;AACA;AACA;;;AAEE,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,QAAQ,EAAEhB,YAAhB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,QAAQ,EAAEN,CAAC,IAAID,sBAAsB,CAACC,CAAD,CAA5C;AAAiD,QAAA,EAAE,EAAC,aAApD;AAAkE,QAAA,IAAI,EAAC,MAAvE;AAA8E,QAAA,KAAK,EAAES;AAArF;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAU,QAAA,QAAQ,EAAET,CAAC,IAAII,qBAAqB,CAACJ,CAAD,CAA9C;AAAmD,QAAA,IAAI,EAAC,MAAxD;AAA+D,QAAA,EAAE,EAAC,YAAlE;AAA+E,QAAA,KAAK,EAAEU;AAAtF;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;KAjEQZ,O;AAmET,eAAeA,OAAf","sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\n\n\nfunction reducer (state, action){\n  return { \n      ...state,\n      posts: action.payload\n  }\n}\n\n\nfunction NewPost() {\n  //const newPosts = props.newPosts\n  //<NewPost handleSubmit={handleSubmit} handleInputTitleChange={handleInputTitleChange} handleInputTextChange={handleInputTextChange} title={title} body={body}/>\n  \n  \n  //useState\n  /*const [newPosts, setNewPosts] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");*/\n\n  const handleInputTitleChange = (e) => {\n    setTitle(e.target.value)\n}\n\n  const handleInputTextChange = (e) => {\n      setBody(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n      e.preventDefault();\n\n      const Blog = {title, body}\n      console.log(Blog)\n    \n      // POST request using fetch inside useEffect React hook\n      const requestOptions = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n              title: title,\n              body : body\n              })\n      };\n      fetch('http://localhost:8000/Posts', requestOptions)\n          .then(response => {\n            response.json()\n            console.log(response, \"post added\")\n          })\n          //.then(data => setPostId(data.id))\n          //.then(post => newPosts.push(post))\n          .then(() => {\n              console.log(newPosts, \"post added\")\n          })\n  }\n\n  /*{newPosts.map(newPost => (\n    <div key={newPost.id}>\n        <h4>{newPost.title}</h4>\n        <p>{newPost.body}</p>\n    </div>\n))}*/\n\n  return (\n    <div className=\"form-container\">\n      <h1></h1>\n      <form onSubmit={handleSubmit}>\n        <label>Blog title:</label>\n        <input onChange={e => handleInputTitleChange(e)} id=\"title-value\" type=\"text\" value={title}></input>\n        <label>Blog text:</label>\n        <textarea onChange={e => handleInputTextChange(e)} type=\"text\" id=\"text-value\" value={body}></textarea>\n        <button type=\"submit\">Add Blog</button>\n      </form>\n    </div>\n  )\n  \n}\n\nexport default NewPost;"]},"metadata":{},"sourceType":"module"}