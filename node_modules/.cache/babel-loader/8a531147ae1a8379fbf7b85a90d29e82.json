{"ast":null,"code":"import _slicedToArray from\"/home/ilia/Documents/Saba/newProjectApi/my-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/home/ilia/Documents/Saba/newProjectApi/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useState,useEffect,useReducer}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function reducer(state,action){switch(action.type){case'title':return _objectSpread(_objectSpread({},state),{},{title:action.payload});case'body':return _objectSpread(_objectSpread({},state),{},{body:action.payload});default:return state;}}function NewPost(){//const newPosts = props.newPosts\n//<NewPost handleSubmit={handleSubmit} handleInputTitleChange={handleInputTitleChange} handleInputTextChange={handleInputTextChange} title={title} body={body}/>\n//useState\n//const [newPosts, setNewPosts] = useState([]);\n/*const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");*/ //useReducer\nvar _useReducer=useReducer(reducer,{title:\"\",body:\"\"}),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];var handleInputTitleChange=function handleInputTitleChange(e){//setTitle(e.target.value)\ndispatch({type:\"title\",payload:e.target.value});};var handleInputTextChange=function handleInputTextChange(e){//setBody(e.target.value)\ndispatch({type:\"body\",payload:e.target.value});};var handleSubmit=function handleSubmit(e){e.preventDefault();//const Blog = {title, body}\n//console.log(Blog)\n// POST request using fetch inside useEffect React hook\nvar requestOptions={method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({title:state.title,body:state.body})};fetch('http://localhost:8000/Posts',requestOptions).then(function(response){response.json();console.log(response,\"post added\");})//.then(data => setPostId(data.id))\n//.then(post => newPosts.push(post))\n.then(function(){console.log(\"post added\");});};/*{newPosts.map(newPost => (\n    <div key={newPost.id}>\n        <h4>{newPost.title}</h4>\n        <p>{newPost.body}</p>\n    </div>\n))}*/return/*#__PURE__*/_jsxs(\"div\",{className:\"form-container\",children:[/*#__PURE__*/_jsx(\"h1\",{}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"label\",{children:\"Blog title:\"}),/*#__PURE__*/_jsx(\"input\",{onChange:function onChange(e){return handleInputTitleChange(e);},id:\"title-value\",type:\"text\",value:state.title}),/*#__PURE__*/_jsx(\"label\",{children:\"Blog text:\"}),/*#__PURE__*/_jsx(\"textarea\",{onChange:function onChange(e){return handleInputTextChange(e);},type:\"text\",id:\"text-value\",value:state.body}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Add Blog\"})]})]});}export default NewPost;","map":{"version":3,"sources":["/home/ilia/Documents/Saba/newProjectApi/my-app/src/NewPost.js"],"names":["useState","useEffect","useReducer","reducer","state","action","type","title","payload","body","NewPost","dispatch","handleInputTitleChange","e","target","value","handleInputTextChange","handleSubmit","preventDefault","requestOptions","method","headers","JSON","stringify","fetch","then","response","json","console","log"],"mappings":"iQAAA,OAASA,QAAT,CAAmBC,SAAnB,CAA8BC,UAA9B,KAAgD,OAAhD,C,wFAGA,QAASC,CAAAA,OAAT,CAAkBC,KAAlB,CAAyBC,MAAzB,CAAgC,CAC9B,OAAOA,MAAM,CAACC,IAAd,EACE,IAAK,OAAL,CACE,sCACOF,KADP,MAEIG,KAAK,CAAEF,MAAM,CAACG,OAFlB,GAIF,IAAK,MAAL,CACE,sCACOJ,KADP,MAEIK,IAAI,CAAEJ,MAAM,CAACG,OAFjB,GAIF,QACE,MAAOJ,CAAAA,KAAP,CAZJ,CAcD,CAGD,QAASM,CAAAA,OAAT,EAAmB,CACjB;AACA;AAGA;AACA;AACA;AACF,yCARmB,CAUjB;AACA,gBAA0BR,UAAU,CAACC,OAAD,CAAU,CAAEI,KAAK,CAAE,EAAT,CAAaE,IAAI,CAAE,EAAnB,CAAV,CAApC,4CAAOL,KAAP,iBAAcO,QAAd,iBAEA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,CAAD,CAAO,CACpC;AACAF,QAAQ,CAAC,CAAEL,IAAI,CAAE,OAAR,CAAiBE,OAAO,CAAEK,CAAC,CAACC,MAAF,CAASC,KAAnC,CAAD,CAAR,CACH,CAHC,CAKA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACH,CAAD,CAAO,CACjC;AACFF,QAAQ,CAAC,CAAEL,IAAI,CAAE,MAAR,CAAgBE,OAAO,CAAEK,CAAC,CAACC,MAAF,CAASC,KAAlC,CAAD,CAAR,CACD,CAHD,CAKA,GAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACJ,CAAD,CAAO,CACxBA,CAAC,CAACK,cAAF,GAEA;AACA;AAEA;AACA,GAAMC,CAAAA,cAAc,CAAG,CACnBC,MAAM,CAAE,MADW,CAEnBC,OAAO,CAAE,CAAE,eAAgB,kBAAlB,CAFU,CAGnBZ,IAAI,CAAEa,IAAI,CAACC,SAAL,CAAe,CACjBhB,KAAK,CAAEH,KAAK,CAACG,KADI,CAEjBE,IAAI,CAAGL,KAAK,CAACK,IAFI,CAAf,CAHa,CAAvB,CAQAe,KAAK,CAAC,6BAAD,CAAgCL,cAAhC,CAAL,CACKM,IADL,CACU,SAAAC,QAAQ,CAAI,CAChBA,QAAQ,CAACC,IAAT,GACAC,OAAO,CAACC,GAAR,CAAYH,QAAZ,CAAsB,YAAtB,EACD,CAJL,CAKI;AACA;AANJ,CAOKD,IAPL,CAOU,UAAM,CACRG,OAAO,CAACC,GAAR,CAAY,YAAZ,EACH,CATL,EAUH,CAzBD,CA2BA;AACF;AACA;AACA;AACA;AACA,KAEE,mBACE,aAAK,SAAS,CAAC,gBAAf,wBACE,aADF,cAEE,cAAM,QAAQ,CAAEZ,YAAhB,wBACE,sCADF,cAEE,cAAO,QAAQ,CAAE,kBAAAJ,CAAC,QAAID,CAAAA,sBAAsB,CAACC,CAAD,CAA1B,EAAlB,CAAiD,EAAE,CAAC,aAApD,CAAkE,IAAI,CAAC,MAAvE,CAA8E,KAAK,CAAET,KAAK,CAACG,KAA3F,EAFF,cAGE,qCAHF,cAIE,iBAAU,QAAQ,CAAE,kBAAAM,CAAC,QAAIG,CAAAA,qBAAqB,CAACH,CAAD,CAAzB,EAArB,CAAmD,IAAI,CAAC,MAAxD,CAA+D,EAAE,CAAC,YAAlE,CAA+E,KAAK,CAAET,KAAK,CAACK,IAA5F,EAJF,cAKE,eAAQ,IAAI,CAAC,QAAb,sBALF,GAFF,GADF,CAaD,CAED,cAAeC,CAAAA,OAAf","sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\n\n\nfunction reducer (state, action){\n  switch(action.type){\n    case 'title':  \n      return { \n          ...state,\n          title: action.payload\n      }\n    case 'body':  \n      return { \n          ...state,\n          body: action.payload\n      }\n    default:\n      return state\n  }\n}\n\n\nfunction NewPost() {\n  //const newPosts = props.newPosts\n  //<NewPost handleSubmit={handleSubmit} handleInputTitleChange={handleInputTitleChange} handleInputTextChange={handleInputTextChange} title={title} body={body}/>\n  \n  \n  //useState\n  //const [newPosts, setNewPosts] = useState([]);\n  /*const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");*/\n\n  //useReducer\n  const [state, dispatch] = useReducer(reducer, { title: \"\", body: \"\"})\n\n  const handleInputTitleChange = (e) => {\n    //setTitle(e.target.value)\n    dispatch({ type: \"title\", payload: e.target.value})\n}\n\n  const handleInputTextChange = (e) => {\n      //setBody(e.target.value)\n    dispatch({ type: \"body\", payload: e.target.value})\n  }\n\n  const handleSubmit = (e) => {\n      e.preventDefault();\n\n      //const Blog = {title, body}\n      //console.log(Blog)\n    \n      // POST request using fetch inside useEffect React hook\n      const requestOptions = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n              title: state.title,\n              body : state.body\n              })\n      };\n      fetch('http://localhost:8000/Posts', requestOptions)\n          .then(response => {\n            response.json()\n            console.log(response, \"post added\")\n          })\n          //.then(data => setPostId(data.id))\n          //.then(post => newPosts.push(post))\n          .then(() => {\n              console.log(\"post added\")\n          })\n  }\n\n  /*{newPosts.map(newPost => (\n    <div key={newPost.id}>\n        <h4>{newPost.title}</h4>\n        <p>{newPost.body}</p>\n    </div>\n))}*/\n\n  return (\n    <div className=\"form-container\">\n      <h1></h1>\n      <form onSubmit={handleSubmit}>\n        <label>Blog title:</label>\n        <input onChange={e => handleInputTitleChange(e)} id=\"title-value\" type=\"text\" value={state.title}></input>\n        <label>Blog text:</label>\n        <textarea onChange={e => handleInputTextChange(e)} type=\"text\" id=\"text-value\" value={state.body}></textarea>\n        <button type=\"submit\">Add Blog</button>\n      </form>\n    </div>\n  )\n  \n}\n\nexport default NewPost;"]},"metadata":{},"sourceType":"module"}