{"ast":null,"code":"var _jsxFileName = \"/home/ilia/Documents/Saba/newProjectApi/my-app/src/DataFetching.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DataFetching() {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [postId, setPostId] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  /*useEffect(() => {\n      /*async function getResponse() {\n          let response = await fetch('https://jsonplaceholder.typicode.com/posts')\n          let content = await response.json()\n          content = content.splice(0, 4)\n          setPosts(response.data)\n          let list = document.querySelector('.posts')\n      \n          let key;\n      \n          for (key in content) {\n            \n              list.innerHTML += `\n              <li>\n                <h4>${content[key].title}</h4>\n                <p>${content[key].body}</p>\n              </li>\n            `\n          }\n      };\n      \n        getResponse();\n  }, [])*/\n\n  useEffect(() => {\n    async function getResponse() {\n      let response = await fetch('https://jsonplaceholder.typicode.com/posts');\n      let content = await response.json();\n      content = content.splice(96, content.length);\n      setPosts(content);\n      console.log(content, \"its posts\");\n    }\n\n    ;\n    getResponse();\n  }, []); //post method\n\n  /*useEffect(() => {\n      // POST request using fetch inside useEffect React hook\n      const requestOptions = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n               title: title,\n               body : text\n              })\n      };\n      fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n          .then(response => response.json())\n          .then(data => setPostId(data.id));\n  \n  // empty dependency array means this effect will only run once (like componentDidMount in classes)\n  }, []);*/\n  //handle\n\n  const handleInputTitleChange = e => {\n    setTitle(e.target.value);\n  };\n\n  const handleInputTextChange = e => {\n    setText(e.target.value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const Blog = {\n      title,\n      text\n    };\n    console.log(Blog); // POST request using fetch inside useEffect React hook\n\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: title,\n        body: text\n      })\n    };\n    fetch('https://jsonplaceholder.typicode.com/posts', requestOptions).then(response => response.json()) //.then(data => setPostId(data.id))\n    .then(data => posts.push(data)).then(() => {\n      console.log(\"post added\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Blog title:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => handleInputTitleChange(e),\n          id: \"title-value\",\n          value: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Blog text:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: e => handleInputTextChange(e),\n          type: \"text\",\n          id: \"text-value\",\n          value: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: [\"Add Blog\", postId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this)]\n      }, post.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DataFetching, \"riyX1IY2qjA3PA6QF9wOh+XUoyQ=\");\n\n_c = DataFetching;\nexport default DataFetching;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataFetching\");","map":{"version":3,"sources":["/home/ilia/Documents/Saba/newProjectApi/my-app/src/DataFetching.js"],"names":["React","useState","useEffect","DataFetching","posts","setPosts","postId","setPostId","title","setTitle","text","setText","getResponse","response","fetch","content","json","splice","length","console","log","handleInputTitleChange","e","target","value","handleInputTextChange","handleSubmit","preventDefault","Blog","requestOptions","method","headers","body","JSON","stringify","then","data","push","map","post","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction DataFetching() {\n    const [posts, setPosts] = useState([]);\n    const [postId, setPostId] = useState([]);\n    const [title, setTitle] = useState(\"\");\n    const [text, setText] = useState(\"\");\n    /*useEffect(() => {\n        /*async function getResponse() {\n            let response = await fetch('https://jsonplaceholder.typicode.com/posts')\n            let content = await response.json()\n            content = content.splice(0, 4)\n            setPosts(response.data)\n            let list = document.querySelector('.posts')\n        \n            let key;\n        \n            for (key in content) {\n              \n                list.innerHTML += `\n                <li>\n                  <h4>${content[key].title}</h4>\n                  <p>${content[key].body}</p>\n                </li>\n              `\n            }\n        };\n        \n          getResponse();\n    }, [])*/\n\n    useEffect(() => {\n        async function getResponse() {\n            let response = await fetch('https://jsonplaceholder.typicode.com/posts')\n            let content = await response.json();\n            content = content.splice(96, content.length)\n            setPosts(content)\n            console.log(content, \"its posts\")\n        };\n        \n          getResponse();\n            \n    }, [])\n\n    //post method\n\n    /*useEffect(() => {\n        // POST request using fetch inside useEffect React hook\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                 title: title,\n                 body : text\n                })\n        };\n        fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n            .then(response => response.json())\n            .then(data => setPostId(data.id));\n    \n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n    }, []);*/\n\n    //handle\n    const handleInputTitleChange = (e) => {\n        setTitle(e.target.value)\n    }\n\n    const handleInputTextChange = (e) => {\n        setText(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const Blog = {title, text}\n        console.log(Blog)\n      \n        // POST request using fetch inside useEffect React hook\n        const requestOptions = {\n             method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                title: title,\n                body : text\n                })\n        };\n        fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n            .then(response => response.json())\n            //.then(data => setPostId(data.id))\n            .then(data => posts.push(data))\n            .then(() => {\n                console.log(\"post added\")\n            })\n      \n    }\n\n    return (\n        <div>\n            <div>\n                <form onSubmit={handleSubmit}>\n                    <label>Blog title:</label>\n                    <input onChange={e => handleInputTitleChange(e)} id=\"title-value\" value={title}></input>\n                    <label>Blog text:</label>\n                    <textarea onChange={e => handleInputTextChange(e)} type=\"text\" id=\"text-value\" value={text}></textarea>\n                    <button type=\"submit\">Add Blog{postId}</button>\n                </form>\n                {posts.map(post => (\n                    <div key={post.id}>\n                        <h4>{post.title}</h4>\n                        <p>{post.body}</p>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default DataFetching;"]},"metadata":{},"sourceType":"module"}