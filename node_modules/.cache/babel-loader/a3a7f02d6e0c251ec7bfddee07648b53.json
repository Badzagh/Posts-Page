{"ast":null,"code":"var _jsxFileName = \"/home/ilia/Documents/Saba/newProjectApi/my-app/src/DataFetching.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DataFetching() {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  const [postId, setPostId] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [text, setText] = useState(\"\");\n  /*useEffect(() => {\n      /*async function getResponse() {\n          let response = await fetch('https://jsonplaceholder.typicode.com/posts')\n          let content = await response.json()\n          content = content.splice(0, 4)\n          setPosts(response.data)\n          let list = document.querySelector('.posts')\n      \n          let key;\n      \n          for (key in content) {\n            \n              list.innerHTML += `\n              <li>\n                <h4>${content[key].title}</h4>\n                <p>${content[key].body}</p>\n              </li>\n            `\n          }\n      };\n      \n        getResponse();\n  }, [])*/\n\n  useEffect(() => {\n    async function getResponse() {\n      let response = await fetch('https://jsonplaceholder.typicode.com/posts');\n      let content = await response.json();\n      content = content.splice(0, 4);\n      setPosts(content);\n    }\n\n    ;\n    getResponse();\n  }, []); //post method\n\n  useEffect(() => {\n    // POST request using fetch inside useEffect React hook\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: 'React Hooks POST Request Example'\n      })\n    };\n    fetch('https://reqres.in/api/posts', requestOptions).then(response => response.json()).then(data => setPostId(data.id)); // empty dependency array means this effect will only run once (like componentDidMount in classes)\n  }, []); //\n\n  const handleInputTitleChange = e => {\n    setTitle(e.tagret.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => handleInputTitleChange(e),\n        id: \"title-value\",\n        value: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"text-value\",\n        value: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: post.title\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.body\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DataFetching, \"pz1GKO6puBBct9NUnLjpK/1DYIQ=\");\n\n_c = DataFetching;\nexport default DataFetching;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataFetching\");","map":{"version":3,"sources":["/home/ilia/Documents/Saba/newProjectApi/my-app/src/DataFetching.js"],"names":["React","useState","useEffect","DataFetching","posts","setPosts","postId","setPostId","title","setTitle","text","setText","getResponse","response","fetch","content","json","splice","requestOptions","method","headers","body","JSON","stringify","then","data","id","handleInputTitleChange","e","tagret","value","map","post"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEIC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeU,WAAf,GAA6B;AACzB,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAA1B;AACA,UAAIC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAApB;AACAD,MAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAe,CAAf,EAAkB,CAAlB,CAAV;AACAZ,MAAAA,QAAQ,CAACU,OAAD,CAAR;AACH;;AAAA;AAECH,IAAAA,WAAW;AAEhB,GAVQ,EAUN,EAVM,CAAT,CA7BoB,CAyCpB;;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMgB,cAAc,GAAG;AACnBC,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFU;AAGnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEf,QAAAA,KAAK,EAAE;AAAT,OAAf;AAHa,KAAvB;AAKAM,IAAAA,KAAK,CAAC,6BAAD,EAAgCI,cAAhC,CAAL,CACKM,IADL,CACUX,QAAQ,IAAIA,QAAQ,CAACG,IAAT,EADtB,EAEKQ,IAFL,CAEUC,IAAI,IAAIlB,SAAS,CAACkB,IAAI,CAACC,EAAN,CAF3B,EAPY,CAWhB;AACC,GAZQ,EAYN,EAZM,CAAT,CA3CoB,CAyDpB;;AACA,QAAMC,sBAAsB,GAAIC,CAAD,IAAO;AAClCnB,IAAAA,QAAQ,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAR;AACH,GAFD;;AAIA,sBACI;AAAA,2BACI;AAAA,8BACI;AAAO,QAAA,QAAQ,EAAEF,CAAC,IAAID,sBAAsB,CAACC,CAAD,CAA5C;AAAiD,QAAA,EAAE,EAAC,aAApD;AAAkE,QAAA,KAAK,EAAEpB;AAAzE;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,YAAtB;AAAmC,QAAA,KAAK,EAAEE;AAA1C;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,EAIKN,KAAK,CAAC2B,GAAN,CAAUC,IAAI,iBACX;AAAA,gCACI;AAAA,oBAAmBA,IAAI,CAACxB;AAAxB,WAASwB,IAAI,CAACN,EAAd;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAkBM,IAAI,CAACX;AAAvB,WAAQW,IAAI,CAACN,EAAb;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADH,CAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GA7EQvB,Y;;KAAAA,Y;AA+ET,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction DataFetching() {\n    const [posts, setPosts] = useState([]);\n    const [postId, setPostId] = useState([]);\n    const [title, setTitle] = useState(\"\");\n    const [text, setText] = useState(\"\");\n    /*useEffect(() => {\n        /*async function getResponse() {\n            let response = await fetch('https://jsonplaceholder.typicode.com/posts')\n            let content = await response.json()\n            content = content.splice(0, 4)\n            setPosts(response.data)\n            let list = document.querySelector('.posts')\n        \n            let key;\n        \n            for (key in content) {\n              \n                list.innerHTML += `\n                <li>\n                  <h4>${content[key].title}</h4>\n                  <p>${content[key].body}</p>\n                </li>\n              `\n            }\n        };\n        \n          getResponse();\n    }, [])*/\n\n    useEffect(() => {\n        async function getResponse() {\n            let response = await fetch('https://jsonplaceholder.typicode.com/posts')\n            let content = await response.json();\n            content = content.splice(0, 4)\n            setPosts(content)\n        };\n        \n          getResponse();\n            \n    }, [])\n\n    //post method\n\n    useEffect(() => {\n        // POST request using fetch inside useEffect React hook\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ title: 'React Hooks POST Request Example' })\n        };\n        fetch('https://reqres.in/api/posts', requestOptions)\n            .then(response => response.json())\n            .then(data => setPostId(data.id));\n    \n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n    }, []);\n\n    //\n    const handleInputTitleChange = (e) => {\n        setTitle(e.tagret.value)\n    }\n\n    return (\n        <div>\n            <div>\n                <input onChange={e => handleInputTitleChange(e)} id=\"title-value\" value={title}></input>\n                <input type=\"text\" id=\"text-value\" value={text}></input>\n                <button>Submit</button>\n                {posts.map(post => (\n                    <div>\n                        <h4 key={post.id}>{post.title}</h4>\n                        <p key={post.id}>{post.body}</p>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default DataFetching;"]},"metadata":{},"sourceType":"module"}