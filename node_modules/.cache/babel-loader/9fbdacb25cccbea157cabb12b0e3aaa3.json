{"ast":null,"code":"var _jsxFileName = \"/home/ilia/Documents/Saba/newProjectApi/my-app/src/DataFetching.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DataFetching() {\n  _s();\n\n  const [posts, setPosts] = useState([]); //const [newPosts, setNewPosts] = useState([]);\n\n  const [postId, setPostId] = useState([]); //const [title, setTitle] = useState(\"\");\n  //const [body, setBody] = useState(\"\");\n\n  /*useEffect(() => {\n      /*async function getResponse() {\n          let response = await fetch('https://jsonplaceholder.typicode.com/posts')\n          let content = await response.json()\n          content = content.splice(0, 4)\n          setPosts(response.data)\n          let list = document.querySelector('.posts')\n      \n          let key;\n      \n          for (key in content) {\n            \n              list.innerHTML += `\n              <li>\n                <h4>${content[key].title}</h4>\n                <p>${content[key].body}</p>\n              </li>\n            `\n          }\n      };\n      \n        getResponse();\n  }, [])*/\n\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      async function getResponse() {\n        let response = await fetch('https://jsonplaceholder.typicode.com/posts', {\n          signal: abortCont.signal\n        });\n        let content = await response.json();\n        content = content.splice(96, content.length);\n        setPosts(content);\n        console.log(content, \"its posts\");\n      }\n\n      ;\n      getResponse();\n    }, 100);\n    return () => abortCont.abort();\n  }, ['https://jsonplaceholder.typicode.com/posts']); //post method\n\n  /*useEffect(() => {\n      // POST request using fetch inside useEffect React hook\n      const requestOptions = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n               title: title,\n               body : text\n              })\n      };\n      fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n          .then(response => response.json())\n          .then(data => setPostId(data.id));\n  \n  // empty dependency array means this effect will only run once (like componentDidMount in classes)\n  }, []);*/\n  //handle\n\n  /*const handleInputTitleChange = (e) => {\n      setTitle(e.target.value)\n  }\n   const handleInputTextChange = (e) => {\n      setBody(e.target.value)\n  }\n   const handleSubmit = (e) => {\n      e.preventDefault();\n       //const Blog = {title, text}\n      //console.log(Blog)\n    \n      // POST request using fetch inside useEffect React hook\n      const requestOptions = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n              title: title,\n              body : body\n              })\n      };\n      fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n          .then(response => response.json())\n          //.then(data => setPostId(data.id))\n          .then(post => {\n              newPosts.push(post)\n          })\n          .then(() => {\n              console.log(newPosts, \"post added\")\n              \n          })\n    \n  }*/\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: newPosts.map(newPost => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: newPost.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: newPost.body\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this)]\n      }, newPost.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DataFetching, \"jJXPJgIxFD/r+QwRsGK+EoPKL8w=\");\n\n_c = DataFetching;\nexport default DataFetching;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataFetching\");","map":{"version":3,"sources":["/home/ilia/Documents/Saba/newProjectApi/my-app/src/DataFetching.js"],"names":["useState","useEffect","DataFetching","posts","setPosts","postId","setPostId","abortCont","AbortController","setTimeout","getResponse","response","fetch","signal","content","json","splice","length","console","log","abort","newPosts","map","newPost","title","body","id"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC,CADoB,CAEpB;;AACA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC,CAHoB,CAIpB;AACA;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEIC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMM,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AAEAC,IAAAA,UAAU,CAAC,MAAM;AACb,qBAAeC,WAAf,GAA6B;AACzB,YAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAAD,EAA+C;AAAEC,UAAAA,MAAM,EAAEN,SAAS,CAACM;AAApB,SAA/C,CAA1B;AACA,YAAIC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAApB;AACAD,QAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAe,EAAf,EAAmBF,OAAO,CAACG,MAA3B,CAAV;AACAb,QAAAA,QAAQ,CAACU,OAAD,CAAR;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ,EAAqB,WAArB;AACH;;AAAA;AAEDJ,MAAAA,WAAW;AACd,KAVS,EAUP,GAVO,CAAV;AAYA,WAAO,MAAMH,SAAS,CAACa,KAAV,EAAb;AACH,GAhBQ,EAgBN,CAAC,4CAAD,CAhBM,CAAT,CA9BoB,CAgDpB;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI;;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKI,sBACI;AAAA,2BACI;AAAA,gBAEKC,QAAQ,CAACC,GAAT,CAAaC,OAAO,iBACjB;AAAA,gCACI;AAAA,oBAAKA,OAAO,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAA,oBAAID,OAAO,CAACE;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA,SAAUF,OAAO,CAACG,EAAlB;AAAA;AAAA;AAAA;AAAA,cADH;AAFL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GArHQxB,Y;;KAAAA,Y;AAuHT,eAAeA,YAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nfunction DataFetching() {\n    const [posts, setPosts] = useState([]);\n    //const [newPosts, setNewPosts] = useState([]);\n    const [postId, setPostId] = useState([]);\n    //const [title, setTitle] = useState(\"\");\n    //const [body, setBody] = useState(\"\");\n    /*useEffect(() => {\n        /*async function getResponse() {\n            let response = await fetch('https://jsonplaceholder.typicode.com/posts')\n            let content = await response.json()\n            content = content.splice(0, 4)\n            setPosts(response.data)\n            let list = document.querySelector('.posts')\n        \n            let key;\n        \n            for (key in content) {\n              \n                list.innerHTML += `\n                <li>\n                  <h4>${content[key].title}</h4>\n                  <p>${content[key].body}</p>\n                </li>\n              `\n            }\n        };\n        \n          getResponse();\n    }, [])*/\n\n    useEffect(() => {\n        const abortCont = new AbortController();\n\n        setTimeout(() => {\n            async function getResponse() {\n                let response = await fetch('https://jsonplaceholder.typicode.com/posts', { signal: abortCont.signal })\n                let content = await response.json();\n                content = content.splice(96, content.length)\n                setPosts(content)\n                console.log(content, \"its posts\")\n            };\n            \n            getResponse();\n        }, 100);\n            \n        return () => abortCont.abort();\n    }, ['https://jsonplaceholder.typicode.com/posts'])\n\n    //post method\n\n    /*useEffect(() => {\n        // POST request using fetch inside useEffect React hook\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                 title: title,\n                 body : text\n                })\n        };\n        fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n            .then(response => response.json())\n            .then(data => setPostId(data.id));\n    \n    // empty dependency array means this effect will only run once (like componentDidMount in classes)\n    }, []);*/\n\n    //handle\n    /*const handleInputTitleChange = (e) => {\n        setTitle(e.target.value)\n    }\n\n    const handleInputTextChange = (e) => {\n        setBody(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        //const Blog = {title, text}\n        //console.log(Blog)\n      \n        // POST request using fetch inside useEffect React hook\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                title: title,\n                body : body\n                })\n        };\n        fetch('https://jsonplaceholder.typicode.com/posts', requestOptions)\n            .then(response => response.json())\n            //.then(data => setPostId(data.id))\n            .then(post => {\n                newPosts.push(post)\n            })\n            .then(() => {\n                console.log(newPosts, \"post added\")\n                \n            })\n      \n    }*/\n\n    return (\n        <div>\n            <div>\n                \n                {newPosts.map(newPost => (\n                    <div key={newPost.id}>\n                        <h4>{newPost.title}</h4>\n                        <p>{newPost.body}</p>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default DataFetching;"]},"metadata":{},"sourceType":"module"}