{"ast":null,"code":"var _jsxFileName = \"/home/ilia/Documents/Saba/newProjectApi/my-app/src/DataFetching.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DataFetching() {\n  _s();\n\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    async function getResponse() {\n      let response = await fetch('https://jsonplaceholder.typicode.com/posts');\n      let content = await response.json();\n      content = content.splice(0, 4);\n      /*let list = document.querySelector('.posts')\n               let key;\n               for (key in content) {\n        \n          list.innerHTML += `\n          <li>\n            <h4>${content[key].title}</h4>\n            <p>${content[key].body}</p>\n          </li>\n        `\n      }*/\n    }\n\n    ;\n    getResponse();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"post.title\"\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DataFetching, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n\n_c = DataFetching;\nexport default DataFetching;\n\nvar _c;\n\n$RefreshReg$(_c, \"DataFetching\");","map":{"version":3,"sources":["/home/ilia/Documents/Saba/newProjectApi/my-app/src/DataFetching.js"],"names":["React","useState","useEffect","DataFetching","posts","setPosts","getResponse","response","fetch","content","json","splice","map","post","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;AAEA,SAASC,YAAT,GAAwB;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,mBAAeI,WAAf,GAA6B;AACzB,UAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAA1B;AACA,UAAIC,OAAO,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAApB;AACAD,MAAAA,OAAO,GAAGA,OAAO,CAACE,MAAR,CAAe,CAAf,EAAkB,CAAlB,CAAV;AAEA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGS;;AAAA;AAECL,IAAAA,WAAW;AAChB,GAtBQ,CAAT;AAwBA,sBACI;AAAA,2BACI;AAAA,gBACKF,KAAK,CAACQ,GAAN,CAAUC,IAAI,iBACX;AAAA;AAAA,SAASA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GArCQX,Y;;KAAAA,Y;AAuCT,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction DataFetching() {\n    const [posts, setPosts] = useState([])\n\n    useEffect(() => {\n        async function getResponse() {\n            let response = await fetch('https://jsonplaceholder.typicode.com/posts')\n            let content = await response.json()\n            content = content.splice(0, 4)\n        \n            /*let list = document.querySelector('.posts')\n        \n            let key;\n        \n            for (key in content) {\n              \n                list.innerHTML += `\n                <li>\n                  <h4>${content[key].title}</h4>\n                  <p>${content[key].body}</p>\n                </li>\n              `\n            }*/\n        };\n        \n          getResponse();\n    })\n\n    return (\n        <div>\n            <div>\n                {posts.map(post => (\n                    <h4 key={post.id}>post.title</h4>\n                    \n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default DataFetching;"]},"metadata":{},"sourceType":"module"}