{"ast":null,"code":"var _jsxFileName = \"/home/ilia/Documents/Saba/newProjectApi/my-app/src/NewPost.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'title':\n      return { ...state,\n        title: action.payload\n      };\n\n    case 'body':\n      return { ...state,\n        body: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction NewPost() {\n  _s();\n\n  //const newPosts = props.newPosts\n  //<NewPost handleSubmit={handleSubmit} handleInputTitleChange={handleInputTitleChange} handleInputTextChange={handleInputTextChange} title={title} body={body}/>\n  //useState\n  //const [newPosts, setNewPosts] = useState([]);\n\n  /*const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");*/\n  //useReducer\n  const [state, dispatch] = useReducer(reducer, {\n    title: \"\",\n    body: \"\"\n  });\n\n  const handleInputTitleChange = e => {\n    dispatch({\n      type: \"title\",\n      payload: e.target.value\n    });\n  };\n\n  const handleInputTextChange = e => {\n    dispatch({\n      type: \"body\",\n      payload: e.target.value\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title: state.title,\n        body: state.body\n      })\n    };\n    fetch('http://localhost:8000/Posts', requestOptions).then(response => {\n      response.json();\n      console.log(response, \"post added\");\n    }) //.then(data => setPostId(data.id))\n    //.then(post => newPosts.push(post))\n    .then(() => {\n      console.log(\"post added\");\n    });\n  };\n  /*{newPosts.map(newPost => (\n    <div key={newPost.id}>\n        <h4>{newPost.title}</h4>\n        <p>{newPost.body}</p>\n    </div>\n  ))}*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Blog title:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        onChange: e => handleInputTitleChange(e),\n        id: \"title-value\",\n        type: \"text\",\n        value: state.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Blog text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        onChange: e => handleInputTextChange(e),\n        type: \"text\",\n        id: \"text-value\",\n        value: state.body\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Blog\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NewPost, \"v5YovvVNkU0h1bQgtthSrHL184c=\");\n\n_c = NewPost;\nexport default NewPost;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewPost\");","map":{"version":3,"sources":["/home/ilia/Documents/Saba/newProjectApi/my-app/src/NewPost.js"],"names":["useState","useEffect","useReducer","reducer","state","action","type","title","payload","body","NewPost","dispatch","handleInputTitleChange","e","target","value","handleInputTextChange","handleSubmit","preventDefault","requestOptions","method","headers","JSON","stringify","fetch","then","response","json","console","log"],"mappings":"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","sourcesContent":["import { useState, useEffect, useReducer } from \"react\";\n\n\nfunction reducer (state, action){\n  switch(action.type){\n    case 'title':  \n      return { \n          ...state,\n          title: action.payload\n      }\n    case 'body':  \n      return { \n          ...state,\n          body: action.payload\n      }\n    default:\n      return state\n  }\n}\n\n\nfunction NewPost() {\n  //const newPosts = props.newPosts\n  //<NewPost handleSubmit={handleSubmit} handleInputTitleChange={handleInputTitleChange} handleInputTextChange={handleInputTextChange} title={title} body={body}/>\n  \n  \n  //useState\n  //const [newPosts, setNewPosts] = useState([]);\n  /*const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(\"\");*/\n\n  //useReducer\n  const [state, dispatch] = useReducer(reducer, { title: \"\", body: \"\"})\n\n  const handleInputTitleChange = (e) => {\n    dispatch({ type: \"title\", payload: e.target.value})\n}\n\n  const handleInputTextChange = (e) => {\n    dispatch({ type: \"body\", payload: e.target.value})\n  }\n\n  const handleSubmit = (e) => {\n      e.preventDefault();\n\n      \n      const requestOptions = {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n              title: state.title,\n              body : state.body\n              })\n      };\n      fetch('http://localhost:8000/Posts', requestOptions)\n          .then(response => {\n            response.json()\n            console.log(response, \"post added\")\n          })\n          //.then(data => setPostId(data.id))\n          //.then(post => newPosts.push(post))\n          .then(() => {\n              console.log(\"post added\")\n          })\n  }\n\n  /*{newPosts.map(newPost => (\n    <div key={newPost.id}>\n        <h4>{newPost.title}</h4>\n        <p>{newPost.body}</p>\n    </div>\n))}*/\n\n  return (\n    <div className=\"form-container\">\n      <h1></h1>\n      <form onSubmit={handleSubmit}>\n        <label>Blog title:</label>\n        <input onChange={e => handleInputTitleChange(e)} id=\"title-value\" type=\"text\" value={state.title}></input>\n        <label>Blog text:</label>\n        <textarea onChange={e => handleInputTextChange(e)} type=\"text\" id=\"text-value\" value={state.body}></textarea>\n        <button type=\"submit\">Add Blog</button>\n      </form>\n    </div>\n  )\n  \n}\n\nexport default NewPost;"]},"metadata":{},"sourceType":"module"}